name: 'Deploy App GH action'
description: 'Deploy app with environment-based configuration'

inputs:
  environment:
    description: 'Environment (dev, demo, staging, prod)'
    required: true
  cloudflare-api-token:
    description: 'Cloudflare API token'
    required: true
  cloudflare-account-id:
    description: 'Cloudflare account ID'
    required: true
  github-token:
    description: 'GitHub token'
    required: true

runs:
  using: 'composite'
  steps:
    - name: '🟢 Setup Node.js'
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: '📦 Download Build Artifact'
      if: inputs.environment != 'prod'
      uses: actions/download-artifact@v4
      with:
        name: invest-v3-build-${{ github.sha }}
        path: ./dist

    - name: '⚙️ Determine wrangler command'
      id: wrangler-command
      shell: sh
      env:
        CLOUDFLARE_ACCOUNT_ID: ${{ inputs.cloudflare-account-id }}
        CLOUDFLARE_API_TOKEN: ${{ inputs.cloudflare-api-token }}
      run: |
        # Map workflow environment names to wrangler environment names
        if [ "${{ inputs.environment }}" = "demo" ]; then
          WRANGLER_ENV="dev"
        elif [ "${{ inputs.environment }}" = "staging" ]; then
          WRANGLER_ENV="prod"
        else
          WRANGLER_ENV="${{ inputs.environment }}"
        fi
        
        if [ "${{ inputs.environment }}" = "staging" ]; then
          # Staging: Upload with tag and preview-alias
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          CMD="versions upload --env $WRANGLER_ENV --tag ${{ github.ref_name }} --message \"Deployed commit: $SHORT_SHA\" --preview-alias staging"
        elif [ "${{ inputs.environment }}" = "prod" ]; then
          # Prod: Deploy existing version by tag
          # First, get the version ID for the tag using JSON output
          VERSION_ID=$(wrangler versions list --name invest-v3-$WRANGLER_ENV --env $WRANGLER_ENV --json | jq -r ".[] | select(.annotations.\"workers/tag\" == \"${{ github.ref_name }}\") | .id" | head -1)
          if [ -n "$VERSION_ID" ] && [ "$VERSION_ID" != "null" ]; then
            CMD="versions deploy $VERSION_ID@100% --env $WRANGLER_ENV --yes"
          else
            echo "Error: No version found for tag ${{ github.ref_name }}"
            exit 1
          fi
        elif [ "${{ inputs.environment }}" = "dev" ]; then
          # PR: Upload with PR info
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          CMD="versions upload --env $WRANGLER_ENV --tag $SHORT_SHA --message \"PR #${{ github.event.pull_request.number }} - $SHORT_SHA\""
        elif [ "${{ inputs.environment }}" = "demo" ]; then
          # Demo: Direct deploy
          CMD="deploy --env $WRANGLER_ENV"
        else
          echo "Error: Environment '${{ inputs.environment }}' is not defined or supported."
          exit 1
        fi
        echo "Wrangler command: $CMD"
        echo "cmd=$CMD" >> $GITHUB_OUTPUT
        echo "wrangler-env=$WRANGLER_ENV" >> $GITHUB_OUTPUT

    - name: '📦 Setup pnpm (for Wrangler)'
      uses: pnpm/action-setup@v3
      with:
        version: 10

    - name: '🚀 Deploy to Cloudflare'
      uses: cloudflare/wrangler-action@v3
      with:
        apiToken: ${{ inputs.cloudflare-api-token }}
        accountId: ${{ inputs.cloudflare-account-id }}
        gitHubToken: ${{ inputs.github-token }}
        command: ${{ steps.wrangler-command.outputs.cmd }}
        wranglerVersion: "4.33.1"
      id: deploy

    - name: '🔗 Handle Missing Preview URLs'
      if: steps.deploy.outputs.deployment-url == ''
      shell: sh
      run: |
        echo "::warning::No deployment URL generated because preview URLs are disabled for this worker."
        echo "::warning::Preview URLs need to be enabled manually in the Cloudflare dashboard."
        echo "::notice::To enable preview URLs:"
        echo "::notice::1. Go to Cloudflare Dashboard > Workers & Pages"
        echo "::notice::2. Select your worker (invest-v3-${{ steps.wrangler-command.outputs.wrangler-env }})"
        echo "::notice::3. Go to Settings > General"
        echo "::notice::4. Enable 'Preview deployments'"
        echo "::notice::5. Re-run this job or update the PR to get a deployment URL."
        echo ""
        echo "::notice::Note: This is a one-time setup. Once enabled, all future deployments will work automatically."

    - name: '✅ Create and Update Deployment Status (Non-Dev)'
      if: always() && inputs.environment != 'dev'
      shell: sh
      run: |
        # Check if deployment already exists for this commit and environment
        EXISTING_DEPLOYMENT=$(gh api repos/:owner/:repo/deployments \
          --field ref=${{ github.sha }} \
          --field environment=${{ inputs.environment }} \
          --jq '.[0]' 2>/dev/null || echo "null")
        
        if [ "$EXISTING_DEPLOYMENT" != "null" ] && [ -n "$EXISTING_DEPLOYMENT" ]; then
          # Use existing deployment
          DEPLOYMENT_ID=$(echo "$EXISTING_DEPLOYMENT" | jq -r '.id')
          echo "Using existing deployment ID: $DEPLOYMENT_ID"
        else
          # Create new deployment
          DEPLOYMENT_RESPONSE=$(gh api repos/:owner/:repo/deployments \
            --method POST \
            --field ref=${{ github.sha }} \
            --field environment=${{ inputs.environment }} \
            --field description="Deployment to ${{ inputs.environment }}" \
            --field auto_inactive=false)
          
          # Extract deployment ID from response
          DEPLOYMENT_ID=$(echo "$DEPLOYMENT_RESPONSE" | jq -r '.id')
          echo "Created new deployment ID: $DEPLOYMENT_ID"
        fi
        
        if [ -n "$DEPLOYMENT_ID" ] && [ "$DEPLOYMENT_ID" != "null" ]; then
          # Update deployment status based on outcome
          gh api repos/:owner/:repo/deployments/$DEPLOYMENT_ID/statuses \
            --method POST \
            --field state=${{ steps.deploy.outcome }} \
            --field description="Deployment to ${{ inputs.environment }} status: ${{ steps.deploy.outcome }}" \
            --field target_url="${{ steps.deploy.outputs.deployment-url }}" || echo "Failed to update deployment status"
        else
          echo "Failed to create or find deployment"
        fi
      env:
        GH_TOKEN: ${{ inputs.github-token }}

outputs:
  deployment-url:
    description: 'URL of the deployed application'
    value: ${{ steps.deploy.outputs.deployment-url }}
