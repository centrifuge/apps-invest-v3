name: 'Deploy App GH action'
description: 'Deploy app with environment-based configuration'

inputs:
  environment:
    description: 'Environment (dev, demo, staging, prod)'
    required: true
  cloudflare-api-token:
    description: 'Cloudflare API token'
    required: true
  cloudflare-account-id:
    description: 'Cloudflare account ID'
    required: true
  github-token:
    description: 'GitHub token'
    required: true

runs:
  using: 'composite'
  steps:
    - name: 'üü¢ Setup Node.js'
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: 'üì¶ Download Build Artifact'
      if: inputs.environment != 'prod'
      uses: actions/download-artifact@v4
      with:
        name: invest-v3-build-${{ github.sha }}
        path: ./dist

    - name: 'üì• Download Build Artifact from Release'
      if: inputs.environment == 'prod'
      shell: sh
      run: |
        ARTIFACT_NAME="invest-v3-${{ github.ref_name }}.zip"
        gh release download ${{ github.ref_name }} \
          --repo ${{ github.repository }} \
          --pattern "$ARTIFACT_NAME" \
          --dir ./dist/
        
        # Extract the zip file
        unzip "$ARTIFACT_NAME" -d dist
      env:
        GH_TOKEN: ${{ inputs.github-token }}

    - name: '‚öôÔ∏è Determine wrangler command'
      id: wrangler-command
      shell: sh
      run: |
        # Map workflow environment names to wrangler environment names
        if [ "${{ inputs.environment }}" = "demo" ]; then
          WRANGLER_ENV="dev"
        elif [ "${{ inputs.environment }}" = "staging" ]; then
          WRANGLER_ENV="prod"
        else
          WRANGLER_ENV="${{ inputs.environment }}"
        fi
        
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          CMD="versions upload --env $WRANGLER_ENV"
        elif [ "${{ github.event.action }}" = "prereleased" ]; then
          CMD="versions upload --env $WRANGLER_ENV --preview-alias staging"
        else
          CMD="deploy --env $WRANGLER_ENV"
        fi
        echo "Wrangler command: $CMD"
        echo "cmd=$CMD" >> $GITHUB_OUTPUT
        echo "wrangler-env=$WRANGLER_ENV" >> $GITHUB_OUTPUT

    - name: 'üì¶ Setup pnpm (for Wrangler)'
      uses: pnpm/action-setup@v3
      with:
        version: 10

    - name: 'üöÄ Deploy to Cloudflare'
      uses: cloudflare/wrangler-action@v3
      with:
        apiToken: ${{ inputs.cloudflare-api-token }}
        accountId: ${{ inputs.cloudflare-account-id }}
        gitHubToken: ${{ inputs.github-token }}
        command: ${{ steps.wrangler-command.outputs.cmd }}
        wranglerVersion: "4.33.1"
      id: deploy

    - name: 'üîó Handle Missing Preview URLs'
      if: steps.deploy.outputs.deployment-url == ''
      shell: sh
      run: |
        echo "::warning::No deployment URL generated because preview URLs are disabled for this worker."
        echo "::warning::Preview URLs need to be enabled manually in the Cloudflare dashboard."
        echo "::notice::To enable preview URLs:"
        echo "::notice::1. Go to Cloudflare Dashboard > Workers & Pages"
        echo "::notice::2. Select your worker (invest-v3-${{ steps.wrangler-command.outputs.wrangler-env }})"
        echo "::notice::3. Go to Settings > General"
        echo "::notice::4. Enable 'Preview deployments'"
        echo "::notice::5. Re-run this job or update the PR to get a deployment URL."
        echo ""
        echo "::notice::Note: This is a one-time setup. Once enabled, all future deployments will work automatically."

    - name: '‚öôÔ∏è Create Deployment Status'
      if: always()
      shell: sh
      run: |
        if [ "${{ steps.deploy.outcome }}" = "success" ]; then
          gh api repos/:owner/:repo/deployments \
            --method POST \
            --field ref=${{ github.ref }} \
            --field environment=${{ inputs.environment }} \
            --field description="Deployed to ${{ inputs.environment }}" \
            --field auto_inactive=false
        fi
      env:
        GH_TOKEN: ${{ inputs.github-token }}

outputs:
  deployment-url:
    description: 'URL of the deployed application'
    value: ${{ steps.deploy.outputs.deployment-url }}
