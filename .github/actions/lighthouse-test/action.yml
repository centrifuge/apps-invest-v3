name: 'Lighthouse Test GH action'
description: 'Run Lighthouse performance tests'

inputs:
  deployment-url:
    description: 'URL of the deployed application to test'
    required: true
  github-token:
    description: 'GitHub token for Lighthouse CI'
    required: true

runs:
  using: 'composite'
  steps:
    - name: 'üìä Performance Test with Lighthouse'
      id: lighthouse
      shell: bash
      run: |
        # Install Lighthouse CI
        npm install -g @lhci/cli
        
        # Run Lighthouse CI on the deployed URL and capture report URL
        set -o pipefail
        lhci autorun --config=lighthouserc.json --collect.url=${{ inputs.deployment-url }} 2>&1 | tee lhci-test.out
        report-url=$(grep -Eo 'https://storage.googleapis.com/[^ ]+\.html' lhci-test.out | tail -n1)
        if [ -n "$report-url" ]; then
          echo "report-url=$report-url" >> $GITHUB_OUTPUT
          echo "Lighthouse report URL: $report-url"
          echo "DEBUG: Set output report-url to: $report-url"
        else
          echo "report-url=" >> $GITHUB_OUTPUT
          echo "No Lighthouse report URL found"
          echo "DEBUG: Set output report-url to empty"
        fi
        
        # Debug: Check what was actually set
        echo "DEBUG: Checking GITHUB_OUTPUT file contents:"
        cat $GITHUB_OUTPUT
      env:
        LHCI_GITHUB_TOKEN: ${{ inputs.github-token }}
      continue-on-error: true
    
    - name: 'üîç Debug Lighthouse Output'
      shell: sh
      if: github.event_name == 'pull_request'
      run: |
        echo "Lighthouse output report-url: '${{ steps.lighthouse.outputs.report-url }}'"
        echo "Lighthouse output length: ${#LIGHTHOUSE_URL}"
        echo "Lighthouse step outcome: ${{ steps.lighthouse.outcome }}"
      env:
        LIGHTHOUSE_URL: ${{ steps.lighthouse.outputs.report-url }}
outputs:
  report-url:
    description: 'URL of the Lighthouse report'
    value: ${{ steps.lighthouse.outputs.report-url }}
