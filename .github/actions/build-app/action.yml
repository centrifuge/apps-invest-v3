name: 'Build App GH action'
description: 'Build app with common setup'

inputs:
  build-args:
    description: 'pnpm $build-args'
    required: false

  github-token:
    description: 'GitHub token (required for mainnet builds)'
    required: false

runs:
  using: 'composite'
  steps:
    - name: '📦 Setup pnpm'
      uses: pnpm/action-setup@v3
      with:
        version: 10

    - name: '🟢 Setup Node.js'
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'pnpm'

    - name: '🔍 Check if Build Artifact Already Exists'
      if: github.event_name == 'release'
      id: check-artifact
      shell: sh
      run: |
        ARTIFACT_NAME="launchpad-bundle${{ github.ref_name }}.zip"
        echo "artifact-name=$ARTIFACT_NAME" >> $GITHUB_OUTPUT
        if [ -n "$(gh release view ${{ github.ref_name }} --repo ${{ github.repository }} --json assets --jq '.assets[] | select(.name == "'"$ARTIFACT_NAME"'")')" ]; then
          echo "::info::✅ Build artifact already exists, skipping build: $ARTIFACT_NAME"
          echo "skip_build=true" >> $GITHUB_OUTPUT
        else
          echo "::info::🔄 Build artifact not found, building $ARTIFACT_NAME"
          echo "skip_build=false" >> $GITHUB_OUTPUT
        fi
      env:
        GH_TOKEN: ${{ inputs.github-token }}

    - name: '📥 Install Dependencies'
      shell: sh
      run: pnpm install --frozen-lockfile

    - name: '🔨 Build App'
      if: ${{ github.event_name != 'release' || steps.check-artifact.outputs.skip_build != 'true' }}
      id: build
      shell: sh
      run: |
        pnpm build ${{ inputs.build-args }}

    - name: '📦 Upload Build Artifact'
      if: ${{ steps.build.outcome == 'success' }}
      uses: actions/upload-artifact@v4
      with:
        name: invest-v3-build-${{ github.sha }}
        path: ./dist

    - name: '📦 Upload Build Artifact to Release'
      if: ${{ steps.build.outcome == 'success' &&  github.event.action == 'prereleased' }}
      shell: sh
      run: |
        # Create a zip file of the dist folder
        cd dist && zip -r ../${{ steps.check-artifact.outputs.artifact-name }} . && cd ..
        
        # Upload to release using GitHub CLI
        gh release upload ${{ github.ref_name }} ${{ steps.check-artifact.outputs.artifact-name }} \
          --repo ${{ github.repository }} \
          --clobber
      env:
        GH_TOKEN: ${{ inputs.github-token }}

