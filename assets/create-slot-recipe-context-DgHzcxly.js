import{g as Y,r as u,h,j as p,c as $}from"./iframe-Bh4nsEqh.js";import{c as E,m as k,E as _}from"./factory-C2D7TBAW.js";function A(i){const{key:m,recipe:x}=i,t=Y();return u.useMemo(()=>{const N=x||(m!=null?t.getSlotRecipe(m):{});return t.sva(structuredClone(N))},[m,x,t])}const F=i=>i.charAt(0).toUpperCase()+i.slice(1),z=i=>{const{key:m,recipe:x}=i,t=F(m||x.className||"Component"),[N,v]=h({name:`${t}StylesContext`,errorMessage:`use${t}Styles returned is 'undefined'. Seems you forgot to wrap the components in "<${t}.Root />" `}),[f,R]=h({name:`${t}ClassNameContext`,errorMessage:`use${t}ClassNames returned is 'undefined'. Seems you forgot to wrap the components in "<${t}.Root />" `,strict:!1}),[T,P]=h({strict:!1,name:`${t}PropsContext`,providerName:`${t}PropsContext`,defaultValue:{}});function S(s){const{unstyled:o,...e}=s,r=A({key:m,recipe:e.recipe||x}),[a,c]=u.useMemo(()=>r.splitVariantProps(e),[e,r]);return{styles:u.useMemo(()=>o?_:r(a),[o,a,r]),classNames:r.classNameMap,props:c}}function L(s,o={}){const{defaultProps:e}=o,r=a=>{const c=P(),n=u.useMemo(()=>k(e,c,a),[c,a]),{styles:d,classNames:l,props:y}=S(n);return p.jsx(N,{value:d,children:p.jsx(f,{value:l,children:p.jsx(s,{...y})})})};return r.displayName=s.displayName||s.name,r}return{StylesProvider:N,ClassNamesProvider:f,PropsProvider:T,usePropsContext:P,useRecipeResult:S,withProvider:(s,o,e)=>{const{defaultProps:r,...a}=e??{},c=E(s,{},a),n=u.forwardRef((d,l)=>{var g;const y=P(),C=u.useMemo(()=>k(r??{},y,d),[y,d]),{styles:w,props:O,classNames:j}=S(C),V=j[o],M=p.jsx(N,{value:w,children:p.jsx(f,{value:j,children:p.jsx(c,{ref:l,...O,css:[w[o],C.css],className:$(C.className,V)})})});return((g=e==null?void 0:e.wrapElement)==null?void 0:g.call(e,M,C))??M});return n.displayName=s.displayName||s.name,n},withContext:(s,o,e)=>{const r=E(s,{},e),a=u.forwardRef((c,n)=>{const d=v(),l=R(),y=l==null?void 0:l[o];return p.jsx(r,{...c,css:[o?d[o]:void 0,c.css],ref:n,className:$(c.className,y)})});return a.displayName=s.displayName||s.name,a},withRootProvider:L,useStyles:v,useClassNames:R}};export{z as c};
